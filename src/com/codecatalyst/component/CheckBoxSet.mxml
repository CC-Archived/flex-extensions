<?xml version="1.0" encoding="utf-8"?>
<mx:Box 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="http://www.codecatalyst.com/2011/flex-extensions">
	
	<mx:Metadata>
		
		/**
		* CheckBox style.
		*/
		[Style(name="checkBoxStyleName", type="String", inherit="no")]
		
		/**
		* Dispatched when the user changes the selected CheckBox(es).
		*/
		[Event(name="change",type="flash.events.Event")]
		
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			////////////////////////////////////////////////////////////////////////////////
			// Copyright (c) 2011 CodeCatalyst, LLC - http://www.codecatalyst.com/
			// 
			// Permission is hereby granted, free of charge, to any person obtaining a copy
			// of this software and associated documentation files (the "Software"), to deal
			// in the Software without restriction, including without limitation the rights
			// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
			// copies of the Software, and to permit persons to whom the Software is
			// furnished to do so, subject to the following conditions:
			//
			// The above copyright notice and this permission notice shall be included in
			// all copies or substantial portions of the Software.
			//
			// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
			// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
			// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
			// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
			// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
			// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
			// THE SOFTWARE.	
			////////////////////////////////////////////////////////////////////////////////
			
			import com.codecatalyst.util.CollectionViewUtil;
			import com.codecatalyst.util.DisplayObjectContainerUtil;
			
			import mx.collections.ICollectionView;
			import mx.controls.CheckBox;
			
			// ========================================
			// Protected properties
			// ========================================			
			
			/**
			 * Backing variable for <code>dataProvider</code> property.
			 * 
			 * @see #dataProvider
			 */
			protected var _dataProvider:ICollectionView;
			
			/**
			 * Backing variable for <code>selectedItems</code> property.
			 * 
			 * @see #selectedItems
			 */
			protected var _selectedItems:Array = new Array();
			
			// ========================================
			// Internal properties
			// ========================================
			
			[Bindable]
			[Exclude]
			/**
			 * CheckBox style declaration.
			 */
			public var checkBoxStyleDeclaration:CSSStyleDeclaration = null;
			
			// ========================================
			// Public properties
			// ========================================
			
			[Bindable("dataProviderChanged")]
			/**
			 * Data provider.
			 */
			public function get dataProvider():Object
			{
				return _dataProvider;
			}
			
			public function set dataProvider( value:Object ):void
			{
				if ( _dataProvider != value )
				{
					_dataProvider = CollectionViewUtil.create( value );
					
					dispatchEvent( new Event( "dataProviderChanged" ) );
				}
			}
			
			[Bindable]
			/**
			 * Label field.
			 */
			public var labelField:String = "label";
			
			[Bindable("change")]
			[Bindable("selectedItemsChanged")]
			/**
			 * Selected item(s).
			 */
			public function get selectedItems():Array
			{
				return _selectedItems;
			}
			
			public function set selectedItems( value:Array ):void
			{
				if ( _selectedItems != value )
				{
					_selectedItems = value;
					
					dispatchEvent( new Event( "selectedItemsChanged" ) );
				}
			}
			
			// ========================================
			// Protected methods
			// ========================================
			
			/**
			 * @inheritDoc
			 */
			override public function styleChanged( styleProp:String ):void
			{
				super.styleChanged( styleProp );
				
				var allStyles:Boolean = ( ( styleProp == null ) || ( styleProp == "styleName" ) );
				
				// CheckBox styles.
				
				if ( ( allStyles == true ) || ( styleProp == "checkBoxStyleName" ) )
				{
					var checkBoxStyleName:String = getStyle( "checkBoxStyleName" ) as String;
					if ( checkBoxStyleName != null )
					{
						checkBoxStyleDeclaration = StyleManager.getStyleDeclaration( "." + checkBoxStyleName );
					}
					else
					{
						checkBoxStyleDeclaration = null;
					}
				}
			}
			
			// ========================================
			// Internal methods
			// ========================================
			
			/**
			 * Handle CheckBox Event.CHANGE.
			 */
			internal function checkBox_changeHandler( event:Event ):void
			{
				_selectedItems = new Array();
				
				DisplayObjectContainerUtil.children( this )
					.forEach( function ( checkBox:CheckBox, index:int, array:Array ):void {
						if ( checkBox.selected )
							_selectedItems.push( checkBox.data );
					});
				
				dispatchEvent( new Event( Event.CHANGE ) );
			}
			
		]]>
	</mx:Script>
	
	<Populator 
		target="{ this }"
		dataProvider="{ dataProvider }">
		<itemRenderer>
			<mx:Component>
				<mx:CheckBox
					styleName="{ outerDocument.checkBoxStyleDeclaration }"
					width="100%" 
					label="{ PropertyUtil.getObjectPropertyValue( data, outerDocument.labelField ) }"
					selected="{ ArrayUtil.contains( outerDocument.selectedItems, data ) }"
					change="outerDocument.checkBox_changeHandler( event )">
					<mx:Script>
						<![CDATA[
							import com.codecatalyst.util.ArrayUtil;
							import com.codecatalyst.util.PropertyUtil;
						]]>
					</mx:Script>
				</mx:CheckBox>
			</mx:Component>
		</itemRenderer>
	</Populator>
	
</mx:Box>
