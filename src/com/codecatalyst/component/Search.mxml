<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas width="200" height="21"
		   initialize="onInitialize();"
		   click="event.stopImmediatePropagation();"
		   cornerRadius="3" backgroundColor="#ffffff"
		   borderStyle="solid" borderColor="#CCCCCC"
		   xmlns:mx="http://www.adobe.com/2006/mxml">
	
	<mx:Metadata>
		/**
		 * Simple announcement of change to listeners
		 */
		[Event(name="change", type="flash.events.Event")]
		
		/**
		* Background color to use while the filter is active
		*/
		[Style(name="filterActiveColor", type="Number", inherit="no")]
		
		/**
		* Background color to use while the filter is idle (text == "")
		*/
		[Style(name="filterIdleColor", type="Number", inherit="no")]
		
		/**
		* Background color to use while the filter is idle (text == "")
		*/
		[Style(name="filterDirtyColor", type="Number", inherit="no")]

	</mx:Metadata>
	
	

	<mx:Script>
		<![CDATA[
			import asset.image.search.SearchAsset;
			
			import com.codecatalyst.util.StyleUtil;
			
			import mx.effects.Fade;
			import mx.utils.ColorUtil;
			import mx.utils.StringUtil;
			
			
			// ************************************************************************************
			// Public Properties 
			// ************************************************************************************

			/**
			 * Flag determines if any criteria change will dispatch a 
			 * change event [after a specified delay]. If FALSE an ENTER key is required to commit.
			 * 
			 * @defaultValue FALSE
			 */
			public var live : Boolean = true;
			
			[Bindable]
			[Invalidate("displayList")]
			/**
			 * Status of search: 
			 * 	<1   === no matches found, 
			 * 	>0   === # of matches
			 */
			public var status : int    = -1;
			
			
			/**
			 * Delay [in milliseconds] before the `change` event is dispatched.
			 * 
			 * @defaultValue 600  
			 */
			public function set delay (val:uint):void {
				if (_delay != val) {
					_delay = val;
					buildTimer(val);
				}
			}
			
			[Bindable]
			/**
			 * Should this control display a `search busy` indicator
			 * And is reset() enabled to clear the search criteria or is it temporarily busy!
			 * 
			 * NOTE: this indicator overlays the delete button while active 
			 */
			public var busy : Boolean = false;

			
			
			[Bindable('change')]
			public function get text():String {
				return input ? StringUtil.trim(input.text) : ""; 
			}
			public function set text(val:String):void {
				if (text != val) {
					_dirty     = true;
					input.text = val;
					
					announce();
				}
			}
			
			[Bindable]
			public var hint : String = "Search for..."; 
			
			
			// ************************************************************************************
			// Public methods  
			// ************************************************************************************
			
			public function reset():void {
				if ( busy ) return;
				
				if ( _timer ) 
					_timer.stop();
				
				input.text = '';
				
				invalidateDisplayList();
				
				// Notify listeners to reset any filters based on cleared search
				announce(true);
			}
			
			// ************************************************************************************
			// Overrides  
			// ************************************************************************************
			
			/**
			 * @inheritDoc
			 */
			override public function styleChanged( styleProp:String ):void
			{
				super.styleChanged( styleProp );
				
					function isChanged(style:String):Boolean {
						return ( ( allStyles == true ) || ( styleProp == style ) );
					}
				
				var allStyles:Boolean = ( ( styleProp == null ) || ( styleProp == "styleName" ) );
				
				filterActiveColor   = isChanged("filterActiveColor")   ? getStyle( "filterActiveColor" )   : filterActiveColor;
				filterIdleColor     = isChanged("filterIdleColor")     ? getStyle( "filterIdleColor" )     : filterIdleColor;
				filterDirtyColor	= isChanged("filterDirtyColor")    ? getStyle( "filterDirtyColor" )    : filterDirtyColor;
				filterNoMatchColor	= isChanged("filterNoMatchColor")  ? getStyle( "filterNoMatchColor" )  : filterNoMatchColor;

				invalidateDisplayList();
			}

			/**
			 * @inheritDoc
			 */
			override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void
			{
				super.updateDisplayList( unscaledWidth, unscaledHeight );
				
				updateStatusColor();
			}
			
			// ************************************************************************************
			// Protected Eventhandlers 
			// ************************************************************************************
			
			protected function onInitialize():void {
				this.delay = 600;
				this.input.setStyle("backgroundAlpha", 0.01); 
			}
			
			/**
			 * FocusIn eventHandler for the TextInput 
			 */
			protected function onSelectAll(e:Event):void {
				input.selectionBeginIndex = 0;
				input.selectionEndIndex = input.text.length;
			}
			
			/**
			 * KeyDown eventHandler for the TextInput 
			 */
			protected function onKeyDown(event:KeyboardEvent):void {
				var commit : Boolean = event.keyCode == Keyboard.ENTER;
				
				if ( commit && !live ) {
					this.setFocus();	
					callLater( announce );
				}
			}
			
			/**
			 * Change eventHandler for the TextInput 
			 */
			protected function onCriteriaChange(event:Event):void {
				
				_dirty = live && true;
				updateStatusColor();
				
				if ( live ) 
					announce( );
			}
			
			/**
			 *  Click eventHandler for the Clear button.
			 */
			protected function onClearSearch():void {
				text = ''; 
				input.setFocus();
				
				callLater( announce, [true] );
			}
			
			/**
			 * The Timer event has fired; so the delay was achieved without a 
			 * reset. Therefore, announce changes and stop the timer. 
			 */
			protected function onDelayedAnnounce(event:Event):void {
				announce(true);
			}
			
			// ************************************************************************************
			// Private Announce Method 
			// ************************************************************************************
			
			/**
			 * Notify listeners that the `text` [aka search criteria] has changed.
			 * If not `immediate` then reset the time for the next interval (ala callLater)
			 * to support future changes and batch-like notifications
			 * 
			 * @param immediate Boolean true is the timer should be stopped/ignored and notification sent immediately. 
			 */
			protected function announce(immediate:Boolean=false):void {
				status = -1;
				
				if ( immediate ) 	
				{
					if ( _timer ) 			_timer.stop();
					if ( enabled != true ) 	return;
					
					_dirty = false;
					
					dispatchEvent( new Event("change") );
					
					invalidateDisplayList();
					
				} else {
					
					invalidateDisplayList();
					validateNow();
					
					resetDelay();
				}
				
			}
			
			
			protected function updateStatusColor():void {
				var bkgrndColor : Number = 	getStyle("backgroundColor") as Number;
				
				var newColor    : Number = 	_dirty 		 	? filterDirtyColor  : 
											(text == '') 	? filterIdleColor   :
											(status > 0)	? filterActiveColor : filterNoMatchColor;
				
				if (bkgrndColor != newColor) 
					setStyle("backgroundColor", newColor);
			}
			
			// ************************************************************************************
			// Protected Methods for timer and delayed change announcements
			// ************************************************************************************
			
			/**
			 * Build internal timer instance; used to feature `delayed` change notifications 
			 */
			protected function buildTimer(delay:int):void {
				if ( _timer ) _timer.stop();
				_timer = (delay == 0) ? null : new Timer(delay);
				
				if ( _timer ) 
					_timer.addEventListener(TimerEvent.TIMER,onDelayedAnnounce,false,0,true);
			}
			
			/**
			 * Reset timer to wait another delay interval before announcing `text` changes 
			 * Whenever the text changes (except for the `clear` action), restart the timer.
			 */
			protected function resetDelay():void {
				if ( !_timer ) return;
				
				_timer.reset();
				_timer.start();
			}
			
			// ************************************************************************************
			// Private Properties
			// ************************************************************************************
			
			/**
			 * @private
			 */
			protected var _timer : Timer = null;
			
			/**
			 * @private
			 */
			protected var _delay : uint  = 0;
			
			/**
			 * Background color to use while the filter is active
			 */
			protected var filterActiveColor:Number;
			
			/**
			 * Background color to use while the filter is idle (text == "")
			 */
			protected var filterIdleColor:Number;
			
			/**
			 * Background color to use while the filter has changed is preparing to announcd
			 * changes.
			 */
			protected var filterDirtyColor:Number;
			
			/**
			 * Background color to use while the filter has zero matches
			 */
			protected var filterNoMatchColor:Number;
			
			/**
			 * Has the changed search criteria been announced ?
			 */
			protected var _dirty	: Boolean = false;
			
			
			// ========================================
			// Static initializers
			// ========================================
			
			/**
			 * Static initializer for default CSS styles.
			 */
			protected static var stylesInitialized:Boolean = initializeStyles();
			
			protected static function initializeStyles():Boolean
			{
				var declaration:CSSStyleDeclaration = StyleUtil.getStyleDeclaration( "Search" ) || new CSSStyleDeclaration();
				
				declaration.defaultFactory = 
					function ():void
					{
						this.filterActiveColor      = 0xbfe5a7;
						this.filterIdleColor	    = 0xffffff;
						this.filterDirtyColor       = 0xfbf2b9;
						this.filterNoMatchColor     = 0xf6928e;
					};
				
				StyleUtil.setStyleDeclaration( "Search", declaration, false );
				
				return true;
			}
			
			
		]]>
	</mx:Script>
	
	<mx:Image source="{SearchAsset.SEARCH_FOR}" 
			  alpha="0.8" filters="{[new DropShadowFilter(1,45,0,.2)]}"
			  x="5" y="3" 
			  mouseEnabled="false"/>
	
	<mx:Label x="25"
			  text="{hint}" alpha=".5" visible="{input.text == ''}" 
			  showEffect="Fade"
			  mouseEnabled="false" selectable="false" />
	
	<mx:TextInput id="input" 
				  width="100%" 
				  paddingLeft="25" 
				  borderStyle="none"
				  focusIn="onSelectAll(event);"
				  keyDown="onKeyDown(event)" 
				  change="onCriteriaChange(event)"/>
	
	
	<mx:Image source="{SearchAsset.SEARCH_CLEAR}" 
			  right="5" y="{text == '' ? 3 : 2}"
			  buttonMode="true" useHandCursor="true"
			  filters="{text == '' ? [ ] : [new DropShadowFilter(1,45,0,.6)]}"
			  click="onClearSearch()" 
			  toolTip="Clear this filter" 
			  visible="{!input.text=='' &amp;&amp; !busy}" />
	
	<mx:Image source="{SearchAsset.SEARCH_BUSY}" 
			  right="2" y="0"
			  toolTip="Busy searching... Please wait!" 
			  visible="{ busy }" />
	
</mx:Canvas>
